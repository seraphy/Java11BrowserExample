<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>jp.seraphyware.example</groupId>
	<artifactId>java11browser</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<main.module>java11browser</main.module>
		<main.class>jp.seraphyware.example.Java11BrowserMain</main.class>
		<releasedir>target/distribute</releasedir>
	</properties>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<!-- Java11でビルド -->
					<release>11</release>
				</configuration>
			</plugin>
			<!-- https://mvnrepository.com/artifact/pl.project13.maven/git-commit-id-plugin -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>4.0.3</version>
				<executions>
					<execution>
						<id>get-the-git-infos</id>
						<goals>
							<goal>revision</goal>
						</goals>
						<phase>initialize</phase>
					</execution>
				</executions>
				<configuration>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
				</configuration>
			</plugin>
			<!-- JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<outputDirectory>${project.build.directory}/mods</outputDirectory>
					<archive>
						<manifest>
							<!-- クラスパス形式の実行可能jar時のためにMANIFESTに依存jarのClass-Path追加 -->
							<addClasspath>true</addClasspath>
							<!-- モジュール時、クラスパスの実行可能jar時のいずれの場合でもエントリポイントとなる -->
							<mainClass>${main.class}</mainClass>
						</manifest>
						<manifestEntries>
							<Implementation-Version>${project.version} ${git.commit.id.abbrev}</Implementation-Version>
							<Implementation-Vendor><![CDATA[seraphyware]]></Implementation-Vendor>
							<Build-SCM-Information>commit: ${git.commit.id.abbrev} branch: ${git.branch}</Build-SCM-Information>
							<Build-At>${git.build.time}</Build-At>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<!-- 依存するJARのlibへの展開 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.2</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/mods</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<dependencies>
					<dependency>
						<groupId>org.junit.platform</groupId>
						<artifactId>junit-platform-surefire-provider</artifactId>
						<version>1.3.2</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- Mavenからモジュールとして実行できるようにする。 https://www.mojohaus.org/exec-maven-plugin/examples/example-exec-for-java-programs.html
				mvn package exec:exec -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<executable>${java.home}/bin/java</executable>
					<arguments>
						<!-- WebViewのhttps通信時のJava11のバグのため -->
						<argument>-Dhttps.protocols=TLSv1,TLSv1.1,TLSv1.2</argument>
						<argument>-p</argument>
						<modulepath />
						<argument>-m</argument>
						<!-- JARにmainClassを埋め込む状態ではないのでmainClassの指定は必要 -->
						<argument>${main.module}/${main.class}</argument>
					</arguments>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<!--
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<delete>
									<fileset dir="${project.build.directory}/mods">
										<include name="javafx-*.jar" />
										<exclude name="javafx-*-win.jar" />
										<exclude name="javafx-*-mac.jar" />
										<exclude name="javafx-*-linux.jar" />
									</fileset>
								</delete>
							</target>
						</configuration>
					</execution>
					 -->
					<execution>
						<!-- 明示的にjlinkを起動してモジュールを含むランタイムを生成する。
						mavenのjlinkプラグインでは、openjfxの生成するxxxxEmptyという自動モジュールも依存関係として
						認識してしまい、「jlinkでは自動モジュールは使用できません」というエラーになる。
						-->
						<id>jlink</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<delete dir="${releasedir}" />
								<exec executable="${java.home}/bin/jlink" failonerror="true">
									<arg value="--module-path" />
									<arg value="${project.build.directory}/mods"/>
									<arg value="--add-modules" />
									<arg value="${main.module}" />
									<arg value="--no-man-pages" />
									<arg value="--no-header-files" />
									<arg value="--verbose" />
									<arg value="--output" />
									<arg value="${releasedir}" />
									<arg value="--launcher" />
									<arg value="${main.module}=${main.module}" />
								</exec>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-controls -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>15.0.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-fxml -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>15.0.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-web -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-web</artifactId>
			<version>15.0.1</version>
		</dependency>
	</dependencies>
</project>
